export ZSH="$HOME/.oh-my-zsh"

# Example format: plugins=(rails git textmate ruby lighthouse)

source $ZSH/oh-my-zsh.sh

# User configuration

# homebrew fix on apple silicon mac
eval "$(/opt/homebrew/bin/brew shellenv)"

# node version manager
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# no ctrl + d
set -o ignoreeof

# unicode in alacritty https://github.com/tmux/tmux/issues/328
export LC_ALL=en_US.UTF-8
export LANG=en_US.UTF-8

# vim
export MANPAGER="nvim +Man!" # man in vim
export EDITOR="nvim"
alias vim="nvim"

# prompt config
PROMPT='%{$fg[yellow]$fg[white]$bg[yellow]%}%n%{$bg[cyan]$fg[yellow]%}%{$bg[cyan]$fg[white]%}%c%{$reset_color%}$(check_git_repo)$(prompt_end)'
RPROMPT=''

ZSH_THEME_GIT_PROMPT_PREFIX="%{$fg[cyan]$bg[red]$fg[white]$bg[red]%}%{$fg[white]%}"
ZSH_THEME_GIT_PROMPT_SUFFIX="%{$reset_color%} "
ZSH_THEME_GIT_PROMPT_DIRTY="%{$fg_bold[white] *$reset_color$fg[red]%}"
ZSH_THEME_GIT_PROMPT_CLEAN="%{$reset_color$fg[red]%}"

function check_git_repo() {
  if [ -z $(git rev-parse --git-dir 2> /dev/null) ]; then
    echo "%{$reset_color$fg[cyan]$reset_color%}"
  else
    echo "$(git_prompt_info)"
  fi
}

function prompt_end() {
  echo "%{$reset_color%}"$'\n'"$ "
}

# FZF
# fzf git bindings
_fzf_git_check() {
  git rev-parse HEAD > /dev/null 2>&1 && return

  [[ -n $TMUX ]] && tmux display-message "Not in a git repository"
  return 1
}

_fzf_git_branches() {
  _fzf_git_check || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf --height 50% "$@" --border -down --ansi --multi --tac |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

_fzf_git_files() {
  _fzf_git_check || return
  git -c color.status=always status --short |
  fzf -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1}) | head -500' |
  cut -c4- | sed 's/.* -> //'
}

zle -N _fzf_git_branches
bindkey '^gb' _fzf_git_branches

zle -N _fzf_git_files
bindkey '^gf' _fzf_git_files

# fzf npm scripts bindings
_npm_scripts() {
  local declare npm_scripts=$(npm run | grep -v '^\w' | grep -v '^$' | sed 's/^[ ]*//' | paste -d! - -)

  echo "$npm_scripts" | cut -d! -f1 | fzf \
    --preview-window wrap \
    --preview "echo \"${npm_scripts}\" | grep {1}! | cut -d! -f2"
}

zle -N _npm_scripts
bindkey '^ns' _npm_scripts

# fzf makefile phony bindings
_makefile_phony() {
  echo "$(grep .PHONY Makefile | cut -d ' ' -f2)" | fzf \
    --preview-window wrap \
    --preview "cat Makefile | sed -n '/^\.PHONY: {1}$/,/^$/p'"
}

zle -N _makefile_phony
bindkey '^mf' _makefile_phony

# fzf tmux
ts() { # create or switch session
  [[ -n "$TMUX" ]] && change="switch-client" || change="attach-session"
  if [ $1 ]; then
    tmux $change -t "$1" 2>/dev/null || (tmux new-session -d -s $1 && tmux $change -t "$1"); return
  fi
  session=$(tmux list-sessions -F "#{session_name}" 2>/dev/null | fzf --exit-0) &&  tmux $change -t "$session" || echo "No sessions found."
}

tk() { # kill session
  local session
  session=$(tmux list-sessions -F "#{session_name}" | \
    fzf --query="$1" --select-1 --exit-0) &&
  tmux kill-session -t "$session"
}
